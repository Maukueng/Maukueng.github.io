<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Maukueng&#39;s blog</title>
    <link>https://maukueng.github.io/</link>
    <description>Recent content in Home on Maukueng&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Tue, 03 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://maukueng.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数据结构和算法-单调栈</title>
      <link>https://maukueng.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E5%8D%95%E8%B0%83%E6%A0%88/</link>
      <pubDate>Tue, 03 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://maukueng.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E5%8D%95%E8%B0%83%E6%A0%88/</guid>
      
      <description>单调栈 单调栈的概念 单调栈就是一个栈结构，里面存放的内容从栈顶到栈底是依次递增或者递减的。它可以用来解决在一个数组中找出每个元素对应左右两部分比自己小的值并且最近的值的情况。并且保证时间复杂度在O(n)。
单调栈的解题模板 stack&amp;lt;int&amp;gt; st; //根据需求，单调增或减//一般寻找下一个更大元素的时候从后往前遍历,且栈顶到栈底递增for (遍历数组) {while (栈非空 &amp;amp;&amp;amp; 当前元素大于等于栈顶元素) {弹出栈顶元素}if (栈非空) {栈顶元素就是下一个更大的元素}当前元素进栈} 单调栈的应用 739. 每日温度 - 力扣（LeetCode）
给定一个整数数组 temperatures ，表示每天的温度，返回一个数组 answer ，其中 answer[i] 是指对于第 i 天，下一个更高温度出现在几天后。如果气温在这之后都不会升高，请在该位置用 0 来代替。
示例 1:
输入: temperatures = [73,74,75,71,69,72,76,73] 输出: [1,1,4,2,1,1,0,0]
代码：
vector&amp;lt;int&amp;gt; dailyTemperatures(vector&amp;lt;int&amp;gt;&amp;amp; temperatures) {//单调栈，栈顶到栈底递增stack&amp;lt;int&amp;gt; st; //存放下标int n = temperatures.size();//存放答案，设置初值vector&amp;lt;int&amp;gt; res(n, 0);for (int i = n - 1; i &amp;gt;= 0; --i) {//若当前温度大于等于栈顶元素，则弹出栈顶元素while (!</description>
      
    </item>
    
    <item>
      <title>数据结构和算法-前缀树</title>
      <link>https://maukueng.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E5%89%8D%E7%BC%80%E6%A0%91/</link>
      <pubDate>Mon, 02 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://maukueng.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E5%89%8D%E7%BC%80%E6%A0%91/</guid>
      
      <description>前缀树（字典树） 什么是前缀树 前缀树是N叉树的一种特殊形式。通常来说，一个前缀树是用来存储字符串的。前缀树的每一个节点代表一个字符串（前缀）。每一个节点会有多个子节点，通往不同子节点的路径上有着不同的字符。子节点代表的字符串是由节点本身的原始字符串，以及通往该子节点路径上所有的字符组成的。
前缀树的优点概括起来就是：一次建树，永久使用
前缀树插入和查询的时间复杂度都是O(n)，n是对应单词的长度
下面是前缀树的一个例子：
​	由am,bad,be,so构成的前缀树
前缀树的创建 前缀树类的创建模板如下：
class Trie {private:bool isEnd;Trie* next[26];public://构造函数Trie() {isEnd = false;for (int i = 0; i &amp;lt; 26; ++i) {next[i] = nullptr;}}//插入函数void insert(string word) {Trie* node = this;for (char c : word) {if (node-&amp;gt;next[c - &amp;#39;a&amp;#39;] == nullptr) {node-&amp;gt;next[c - &amp;#39;a&amp;#39;] = new Trie();}node = node-&amp;gt;next[c - &amp;#39;a&amp;#39;];}node-&amp;gt;isEnd = true;}//搜索函数bool search(string word) {Trie* node = this;for (char c : word) {if (node-&amp;gt;next[c - &amp;#39;a&amp;#39;] == nullptr) {return false;}node = node-&amp;gt;next[c - &amp;#39;a&amp;#39;];}return node-&amp;gt;isEnd;}//前缀匹配函数，如果之前已经插入的字符串 word 的前缀之一为 prefix ，返回 true ；否则，返回 false bool startsWith(string prefix) {Trie* node = this;for (char c : prefix) {if (node-&amp;gt;next[c - &amp;#39;a&amp;#39;] == nullptr) {return false;}node = node-&amp;gt;next[c - &amp;#39;a&amp;#39;];}return true;}}; 前缀树的应用 208.</description>
      
    </item>
    
    <item>
      <title>hugo快速搭建个人网站</title>
      <link>https://maukueng.github.io/posts/hugo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/</link>
      <pubDate>Sun, 01 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://maukueng.github.io/posts/hugo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/</guid>
      
      <description>hugo快速搭建个人网站 hugo安装 我是使用chocolatey安装的hugo，所以先安装chocolatey。
chocolatey安装过程：
可以去官网上进行安装Chocolatey Software | Chocolatey - The package manager for Windows 安装完成后在命令行输入choco --version如果显示版本号则安装成功 使用chocolatey安装hugo：
建议安装扩展版本，因为一些主题需要扩展版本，安装hugo扩展版本，在命令行输入choco install hugo-extended -confirm，如果不想安装扩展版本则输入choco install hugo -confirm 安装完成后输入hugo version，如果出现版本号则安装成功，否则可以检查一下环境配置 创建站点 创建博客站点：
在命令行切换路径到你希望存放博客文件的地方，输入hugo new site myblog创建站点，这里会生成一个myblog文件夹，这个文件夹就是博客网站的根目录。 下载Hugo主题：
可以在hugo主题官网选择喜欢的主题进行下载，https://themes.gohugo.io/themes 下载完成之后的主题文件放到根目录即myblog目录下的themes文件夹里 运行博客网站
将themes/你下载的主题文件/exampleSite文件夹里的内容全部复制粘贴到根目录即mylog下 博客的内容在根目录的content文件夹里，可以自由增删或者修改 根目录下命令行输入hugo server启动hogo服务，在浏览器输入http://localhost:1313/就可以进行博客效果预览。 部署到github上 创建github page：
在github上创建仓库，仓库名必须是{用户名/github.io} 生成html并部署到github上：
在根目录下执行hugo会在根目录生成一个public文件夹，里面放的就是需要推送到远程仓库的文件 打开git bash，切换到public目录，然后将该目录推送到之前创建的仓库，等待仓库建立网站 https://用户名.github.io/就是网站地址 </description>
      
    </item>
    
    <item>
      <title>Markdown Syntax Guide</title>
      <link>https://maukueng.github.io/posts/markdown-syntax/</link>
      <pubDate>Sat, 30 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://maukueng.github.io/posts/markdown-syntax/</guid>
      
      <description>&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>About</title>
      <link>https://maukueng.github.io/pages/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://maukueng.github.io/pages/about/</guid>
      
      <description>Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.
Hugo makes use of a variety of open source projects including:
https://github.com/yuin/goldmark https://github.</description>
      
    </item>
    
  </channel>
</rss>
